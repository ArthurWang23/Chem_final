import { SGroup } from './sgroup';
import { Struct } from './struct';
export declare class FunctionalGroup {
    #private;
    constructor(sgroup: SGroup);
    get name(): string;
    get relatedSGroupId(): number;
    get isExpanded(): boolean;
    get relatedSGroup(): SGroup;
    static isFunctionalGroup(sgroup: any): boolean;
    static getFunctionalGroupByName(searchName: string): Struct | null;
    static atomsInFunctionalGroup(functionalGroups: any, atom: any): number | null;
    static bondsInFunctionalGroup(molecule: any, functionalGroups: any, bond: any): number | null;
    static findFunctionalGroupByAtom(functionalGroups: any, atom: any): number | null;
    static findFunctionalGroupByBond(molecule: any, functionalGroups: any, bond: any): number | null;
    static clone(functionalGroup: FunctionalGroup): FunctionalGroup;
    static isAttachedSGroup(sgroup: any, molecule: any): boolean;
    /**
     * This function determines, if an atom is used for attachment to other structure.
     * For example, having sgroup CF3, which looks like
     *              F
     *              |
     *            F-C-F
     *              |
     *         other struct
     * C â€“ is an attachment point
     */
    static isAttachmentPointAtom(atomId: number, molecule: Struct): boolean;
    static isFirstAtomInFunctionalGroup(sgroups: any, aid: any): boolean;
    static isAtomInContractedFunctionalGroup(atom: any, sgroups: any, functionalGroups: any, sgroupsFromReStruct: boolean): boolean;
    static isBondInContractedFunctionalGroup(bond: any, sgroups: any, functionalGroups: any, sgroupsFromReStruct: boolean): boolean;
    static isContractedFunctionalGroup(sgroupId: any, functionalGroups: any): boolean;
}
